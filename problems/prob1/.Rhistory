l
library(plotrix)
library(lmtest)
library(qpcR)
library(nlstools)
require(qpcR)
require(rpanel)
require(lattice)
require(latticeExtra)
require(grid)
require(lattice)
require(RColorBrewer)
library(ggplot2)
library("lattice")
library(latticeExtra) # for mergedTrellisLegendGrob()
source("lib/nlsResiduals.r")
source("lib/ridiculas_functions.r")
source("lib/msFunc.r")
# Função principal para a geração dos gráficos
run_all <- function(modelo, dados){
# vendo a superfície ajustada
args(panel.3d.contour)
body(panel.3d.contour)
fcc_r    <- M.predict(modelo, dados$EVA, dados$FIBRA)
fcc      <- dados$COMPRESSAO
residuos <- fcc-fcc_r
reducao_res <- (M.predict(modelo, 0.25, 0)-M.predict(modelo, 0, 0))/M.predict(modelo, 0, 0)
print(summary(modelo))
print(paste("R^2 -> ", Q.R2(fcc_r, fcc)))
print(paste("SSE -> ", Q.SSE(fcc_r, fcc)))
print(paste("MSE -> ", Q.MSE(modelo, fcc_r, fcc)))
press <- Q.PRESS(modelo, 'COMPRESSAO', fcc0, dados)
print(paste("PRESS -> ", press))
print(paste("R^2 PRESS -> ", Q.R2Pred(fcc, press)))
## TEstes de hipotese
#Shapiro-wilk
print(shapiro.test(residuals(modelo)))
#Durbin-Watson test
print(dwtest(modelo))
#Breusch-Pagan test
print(bptest(modelo))
## PLOT  ##
# Residuo
PrintResiduoNormalizado(pathImagens("compressao", "residuo_normalizado.png"),
modelo, residuos, fcc_r)
PrintResiduoVarReg(pathImagens("compressao", "residuo.png"),
"Resistência à Compressão", residuos, dados$COMPRESSAO)
PrintResiduoVarReg(pathImagens("compressao", "residuo_eva.png"),
"EVA (%)", residuos, dados$EVA)
PrintResiduoVarReg(pathImagens("compressao", "residuo_fibra.png"),
"Fibras (%)", residuos, dados$FIBRA)
# Funcao
printModeloAjuste(pathImagens("compressao", "modelo_ajuste.png"),
modelo, fcc_r, fcc, ylim=c(10,25), xlim=c(10,25))
# Graficos 3d
lim_xyz <- c(0.26, 0.021, 0, 26)
lbl_xyz <- c("EVA (%)", "Fibra (%)", "Resistência à Compress\u{E3}o (MPa)")
print3DFunc(pathImagens("compressao", "3d_1.png"),
modelo,
list(z=-50, x=-70, y=0),
lbl_xyz,
lim_xyz)
print3DFunc(pathImagens("compressao", "3d_2.png"),
modelo,
list(z=-120, x=-70, y=0),
lbl_xyz,
lim_xyz)
# Graficos 3d EFICIENCIA
print3DEfici(pathImagens("compressao", "3d_ef.png"),
modelo,
list(z=140, x=-70, y=-00),
c("EVA (%)", "Fibra (%)", "Eficiência (%)"),
c(0.26, 0.021, 0, 31))
# Curvas de Nível
printCurvasNivelFunc(pathImagens("compressao", "curva_nivel.png"), modelo,  lbl_xyz,lim_xyz)
# Max resistencia Barra
maxFib <- optimizeFibModelo(modelo, iEva=seq(0.05, 0.25, by=0.05), TRUE)
printMaxResistenciaFibra(pathImagens("compressao", "barra_max.png"), maxFib, lbl_xyz[3])
# Max resistencia Evolucao
maxFib <- optimizeFibModelo(modelo, iEva=seq(0, 0.25, by=0.005), TRUE)
printMaxResistenciaFibraLine(pathImagens("compressao", "eva_max.png"), maxFib, lbl_xyz[3])
# Resistencia por eva, com 3 curvas 0,1,2 % fibra
printResistenciaFibraLinha(pathImagens("compressao", "eva_0_1_2.png"), modelo, lbl_xyz[3])
# Resistencia por fibra, com 3 curvas 5, 15, 25 % fibra
printResistenciaEVALinha(pathImagens("compressao", "fibra_5_15_25.png"), modelo, lbl_xyz[3])
}
### DADOS
dados <- read.table(file="dados.txt", header=T, sep=" ")
## Filtra apenas o EVA fino
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
## Dados de compressão do CR (Concreto de Referencia)
fcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$COMPRESSAO
## Dados de Compressao
fcc   <- dados$COMPRESSAO
## Calcula o y da regressao
y     <- fcc-fcc0
######################### Rergessao  #########################
### MODELO 1 COMPLETO
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
anova(modelo)
y_    <- M.predict(modelo, dados$EVA, dados$FIBRA)
run_all(modelo, dados)
### MODELO 2 RESUMO
modelo      <-lm(y~0+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
anova(modelo)
run_all <- function(modelo, dados){
# vendo a superfície ajustada
args(panel.3d.contour)
body(panel.3d.contour)
fcc_r    <- M.predict(modelo, dados$EVA, dados$FIBRA)
fcc      <- dados$COMPRESSAO
residuos <- fcc-fcc_r
reducao_res <- (M.predict(modelo, 0.25, 0)-M.predict(modelo, 0, 0))/M.predict(modelo, 0, 0)
print(summary(modelo))
print(paste("R^2 -> ", Q.R2(fcc_r, fcc)))
print(paste("SSE -> ", Q.SSE(fcc_r, fcc)))
print(paste("MSE -> ", Q.MSE(modelo, fcc_r, fcc)))
press <- Q.PRESS(modelo, 'COMPRESSAO', fcc0, dados)
print(paste("PRESS -> ", press))
print(paste("R^2 PRESS -> ", Q.R2Pred(fcc, press)))
## TEstes de hipotese
#Shapiro-wilk
print(shapiro.test(residuals(modelo)))
#Durbin-Watson test
print(dwtest(modelo))
#Breusch-Pagan test
print(bptest(modelo))
## PLOT  ##
# Residuo
PrintResiduoNormalizado(pathImagens("compressao", "residuo_normalizado.png"),
modelo, residuos, fcc_r)
PrintResiduoVarReg(pathImagens("compressao", "residuo.png"),
"Resistência à Compressão", residuos, dados$COMPRESSAO)
PrintResiduoVarReg(pathImagens("compressao", "residuo_eva.png"),
"EVA (%)", residuos, dados$EVA)
PrintResiduoVarReg(pathImagens("compressao", "residuo_fibra.png"),
"Fibras (%)", residuos, dados$FIBRA)
# Funcao
printModeloAjuste(pathImagens("compressao", "modelo_ajuste.png"),
modelo, fcc_r, fcc, ylim=c(10,25), xlim=c(10,25))
# Graficos 3d
lim_xyz <- c(0.26, 0.021, 0, 26)
lbl_xyz <- c("EVA (%)", "Fibra (%)", "Resistência à Compress\u{E3}o (MPa)")
print3DFunc(pathImagens("compressao", "3d_1.png"),
modelo,
list(z=-50, x=-70, y=0),
lbl_xyz,
lim_xyz)
print3DFunc(pathImagens("compressao", "3d_2.png"),
modelo,
list(z=-120, x=-70, y=0),
lbl_xyz,
lim_xyz)
# Graficos 3d EFICIENCIA
print3DEfici(pathImagens("compressao", "3d_ef.png"),
modelo,
list(z=140, x=-70, y=-00),
c("EVA (%)", "Fibra (%)", "Eficiência (%)"),
c(0.26, 0.021, 0, 31))
# Curvas de Nível
printCurvasNivelFunc(pathImagens("compressao", "curva_nivel.png"), modelo,  lbl_xyz,lim_xyz)
# Max resistencia Barra
maxFib <- optimizeFibModelo(modelo, iEva=seq(0.05, 0.25, by=0.05), TRUE)
printMaxResistenciaFibra(pathImagens("compressao", "barra_max.png"), maxFib, lbl_xyz[3])
# Max resistencia Evolucao
maxFib <- optimizeFibModelo(modelo, iEva=seq(0, 0.25, by=0.005), TRUE)
printMaxResistenciaFibraLine(pathImagens("compressao", "eva_max.png"), maxFib, lbl_xyz[3])
# Resistencia por eva, com 3 curvas 0,1,2 % fibra
printResistenciaFibraLinha(pathImagens("compressao", "eva_0_1_2.png"), modelo, lbl_xyz[3])
# Resistencia por fibra, com 3 curvas 5, 15, 25 % fibra
printResistenciaEVALinha(pathImagens("compressao", "fibra_5_15_25.png"), modelo, lbl_xyz[3])
}
dados <- read.table(file="dados.txt", header=T, sep=" ")
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
fcc   <- dados$COMPRESSAO
fcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$COMPRESSAO
y     <- fcc-fcc0
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
dados <- read.table(file="dados.txt", header=T, sep=" ")
setwd("~/")
c(1, 0.9537037037037036
2, 0.9537037037037036
3, 0.9462962962962962
4, 0.9537037037037038
5, 0.9685185185185186
6, 0.962962962962963
7, 0.961111111111111
8, 0.961111111111111
9, 0.9537037037037038
10, 0.9537037037037038
11, 0.9481481481481481
12, 0.9537037037037037
13, 0.9574074074074075
14, 0.9592592592592593
15, 0.9537037037037035
16, 0.9555555555555554
17, 0.9555555555555555
18, 0.962962962962963
19, 0.9666666666666666
20, 0.9648148148148148
21, 0.9648148148148149
22, 0.962962962962963
23, 0.9703703703703703
24, 0.9648148148148148
25, 0.9666666666666667
26, 0.9611111111111111
27, 0.9666666666666666
28, 0.962962962962963
29, 0.9722222222222221
30, 0.962962962962963
31, 0.9666666666666667
32, 0.9648148148148148
33, 0.9666666666666666
34, 0.9592592592592593
35, 0.9648148148148148
36, 0.9648148148148149
37, 0.9574074074074074
38, 0.9592592592592593
39, 0.9555555555555555
40, 0.9611111111111111
41, 0.9518518518518517
42, 0.9555555555555557
43, 0.9537037037037037
44, 0.9574074074074075
45, 0.9555555555555556
46, 0.9537037037037037
47, 0.951851851851852
48, 0.9537037037037038
49, 0.9537037037037037
50, 0.9537037037037038
51, 0.9537037037037038
52, 0.9500000000000001
53, 0.9500000000000002
54, 0.9481481481481482
55, 0.9500000000000001
56, 0.951851851851852
57, 0.9500000000000001
58, 0.9500000000000001
59, 0.951851851851852
60, 0.9444444444444444
61, 0.95
62, 0.9407407407407409
63, 0.9407407407407408
64, 0.9370370370370371
65, 0.9296296296296296
66, 0.9222222222222222
67, 0.922222222222222
68, 0.9203703703703703
69, 0.9111111111111111
70, 0.9111111111111111
71, 0.8999999999999999
72, 0.8888888888888888
73, 0.8814814814814815
74, 0.8703703703703705
75, 0.8666666666666667
76, 0.8537037037037036
77, 0.8425925925925927
78, 0.8333333333333334
79, 0.8166666666666668
80, 0.8018518518518517
81, 0.7796296296296297
82, 0.7703703703703704
83, 0.7518518518518518
84, 0.7370370370370369
85, 0.7203703703703703
86, 0.7000000000000001
87, 0.6833333333333333
88, 0.6666666666666666
89, 0.6537037037037038
90, 0.6370370370370371
91, 0.6240740740740742
92, 0.5944444444444444
93, 0.5814814814814814
94, 0.5722222222222223
95, 0.5685185185185185
96, 0.55
97, 0.5407407407407407
98, 0.5296296296296296
99, 0.5203703703703704
100, 0.5111111111111111
101, 0.5092592592592592
102, 0.5037037037037038
103, 0.49629629629629635
104, 0.4907407407407408
105, 0.4796296296296297
106, 0.47037037037037044
107, 0.46851851851851856
108, 0.4611111111111112
109, 0.4555555555555556
110, 0.4537037037037038
111, 0.4481481481481482
112, 0.4370370370370371
113, 0.43333333333333335
114, 0.4222222222222222
115, 0.42777777777777776
116, 0.412962962962963
117, 0.39814814814814814
118, 0.3962962962962963
119, 0.37592592592592594
120, 0.3777777777777778
121, 0.3611111111111111
122, 0.3537037037037037
123, 0.3425925925925926
124, 0.337037037037037
125, 0.337037037037037
126, 0.337037037037037
127, 0.337037037037037
128, 0.337037037037037
129, 0.337037037037037
130, 0.337037037037037
131, 0.337037037037037
132, 0.337037037037037
133, 0.337037037037037
134, 0.337037037037037
135, 0.337037037037037
136, 0.337037037037037
137, 0.337037037037037
138, 0.337037037037037
139, 0.337037037037037
140, 0.337037037037037
141, 0.337037037037037
142, 0.337037037037037
143, 0.337037037037037
144, 0.337037037037037
145, 0.337037037037037
146, 0.337037037037037
147, 0.337037037037037
148, 0.337037037037037
149, 0.337037037037037
150, 0.337037037037037
)
d = read.csv("log_k.txt", HEADER = FALSE, SEP=",")
d = read.csv("log_k.txt", header  = FALSE, sep=",")
setwd("~/Academia/Doutorado/UFG/ARP/lista 3/KNN_classifier/problems/prob1")
d = read.csv("log_k.txt", header  = FALSE, sep=",")
d
plot(d)
d = read.csv("log_k.txt", header  = FALSE, sep=",")
plot(d)
library(plotly)
x <- c(1:100)
random_y <- rnorm(100, mean = 0)
data <- data.frame(x, random_y)
p <- plot_ly(data, x = ~x, y = ~random_y, type = 'scatter', mode = 'lines')
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="line/basic")
chart_link
chart_link = plotly_POST(p, filename="line/basic")
help(signup, package = 'plotly')
signup(username, email, save = TRUE)
s <- signup('anna.lyst', 'anna.lyst@plot.ly')
s <- signup('marlesson', 'marlessonsa@gmail.com')
s <- signup('marlesson', 'marlessonsa@gmail.com')
library(plotly)
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="scatter/basic")
chart_link
devtools::install_github("ropensci/plotly")
d = read.csv("log_k.txt", header  = FALSE, sep=",")
plot(d)
# Get this figure: fig <- get_figure("marlesson", 5)
# Get this figure's data: data <- get_figure("marlesson", 5)$data
# Add data to this figure: p <- add_trace(p, x=c(4, 5), y=c(4, 5), kwargs=list(filename="Plot 5", fileopt="extend"))
# Get y data of first trace: y1 <- get_figure("marlesson", 5)$data[[1]]$y
# Get figure documentation: https://plot.ly/r/get-requests/
# Add data documentation: https://plot.ly/r/file-options/
# You can reproduce this figure in R with the following code!
# Learn about API authentication here: https://plot.ly/r/getting-started
# Find your api_key here: https://plot.ly/settings/api
library(plotly)
trace1 <- list(
x = c("3", "5", "7", "9", "11", "13", "15", "17", "19", "21", "23", "25", "27", "29", "31", "33", "35", "37", "39", "41", "43", "45", "47", "49", "51", "53", "55", "57", "59", "61", "63", "65", "67", "69", "71", "73", "75", "77", "79", "81", "83", "85", "87", "89", "91", "93", "95", "97", "99", "101", "103", "105", "107", "109", "111", "113", "115", "117", "119", "121", "123", "125", "127", "129", "131", "133", "135", "137", "139", "141", "143", "145", "147", "149"),
y = c(" 0.9425925925925926", " 0.9444444444444444", " 0.9425925925925928", " 0.9407407407407408", " 0.9462962962962963", " 0.9407407407407408", " 0.9462962962962963", " 0.9500000000000001", " 0.9555555555555556", " 0.9555555555555556", " 0.9574074074074074", " 0.9629629629629631", " 0.9592592592592593", " 0.9537037037037036", " 0.9537037037037036", " 0.9537037037037036", " 0.9537037037037036", " 0.9518518518518517", " 0.9518518518518517", " 0.9574074074074074", " 0.9555555555555556", " 0.951851851851852", " 0.9481481481481482", " 0.9481481481481482", " 0.9425925925925926", " 0.9481481481481481", " 0.95", " 0.9481481481481482", " 0.9444444444444445", " 0.9296296296296295", " 0.9259259259259259", " 0.9129629629629629", " 0.8944444444444444", " 0.8944444444444444", " 0.887037037037037", " 0.8777777777777777", " 0.8611111111111112", " 0.8592592592592592", " 0.8444444444444443", " 0.8203703703703703", " 0.7851851851851852", " 0.7555555555555556", " 0.7333333333333334", " 0.6944444444444445", " 0.6759259259259259", " 0.6407407407407407", " 0.6148148148148148", " 0.5925925925925927", " 0.5629629629629629", " 0.5314814814814816", " 0.5018518518518519", " 0.4851851851851852", " 0.4703703703703703", " 0.4666666666666667", " 0.45185185185185184", " 0.44259259259259254", " 0.4333333333333333", " 0.42962962962962964", " 0.42407407407407405", " 0.41666666666666663", " 0.39999999999999997", " 0.39999999999999997", " 0.39999999999999997", " 0.39999999999999997", " 0.39999999999999997", " 0.39999999999999997", " 0.39999999999999997", " 0.39999999999999997", " 0.39999999999999997", " 0.39999999999999997", " 0.39999999999999997", " 0.39999999999999997", " 0.39999999999999997", " 0.39999999999999997"),
mode = "lines",
name = " 0.9462962962962963",
type = "scatter",
uid = "31eefb",
xsrc = "marlesson:4:abb54b",
ysrc = "marlesson:4:8f2899"
)
data <- list(trace1)
layout <- list(
autosize = TRUE,
hovermode = "closest",
title = "KNN - Taxa de acerto com relaÃ§Ã£o ao tamanho de K",
xaxis = list(
autorange = TRUE,
range = c(3, 149),
title = "K",
type = "linear"
),
yaxis = list(
autorange = TRUE,
range = c(0.368724279835, 0.994238683128),
title = "Taxa de Acerto",
type = "linear"
)
)
p <- plot_ly()
p <- add_trace(p, x=trace1$x, y=trace1$y, mode=trace1$mode, name=trace1$name, type=trace1$type, uid=trace1$uid, xsrc=trace1$xsrc, ysrc=trace1$ysrc)
p <- layout(p, autosize=layout$autosize, hovermode=layout$hovermode, title=layout$title, xaxis=layout$xaxis, yaxis=layout$yaxis)
p
